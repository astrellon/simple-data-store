"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EmptyModifier=(()=>null);class DataStore{constructor(t){this.subscriptions=[],this.currentState=t}state(){return this.currentState}execute(t,e=!0){const s=t(this.currentState);null!==s&&void 0!==s&&s!==this.currentState&&(this.currentState=Object.assign({},this.currentState,s),this.triggerSubscriptions(t,e))}subscribe(t,e,s,r){const i=t(this.currentState),c={selector:new SelectorContext(t,i,s,r),subscription:e};this.subscriptions.push(c);let u=!1;return()=>{if(u)return;const t=this.subscriptions.indexOf(c);t>=0&&this.subscriptions.splice(t,1),u=!0}}subscribeAny(t,e){return this.subscribe(t=>t,t,void 0,e)}unsubscribeAll(){this.subscriptions=[]}triggerSubscriptions(t,e){for(const s of this.subscriptions){const r=s.selector.getValue(this.currentState);s.selector.checkIfChanged(r)&&s.subscription(this.currentState,r,t,e)}}}exports.default=DataStore;class SelectorContext{constructor(t,e,s,r){this.selector=t,this.prevValue=e,this.comparer=s,this.name=r}getValue(t){return this.selector(t)}checkIfChanged(t){let e=!1;return e=void 0!==this.comparer?!this.comparer(this.prevValue,t):t!==this.prevValue,this.prevValue=t,e}}