{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// A function to create a patch for the state.\n// Meaning this should return a partial state to be merged with the current state.\nexport type Modifier<TState> = (state: TState) => Partial<TState> | null;\n\n// A function that takes part of the state and returns a sub set of that state.\n// Used to look for specific parts of the state that have changed.\nexport type Selector<TState, TValue> = (state: TState) => TValue;\n\n// A function used to compare if two parts of the state have actually changed.\n// By default a strict equals is used when comparing however sometimes something more complex is needed.\n// The TValue refers to the value returned by the Selector.\nexport type SelectorComparer<TValue> = (prevValue: TValue, newValue: TValue) => boolean;\n\n// A callback function to be triggered when a selector has returned a new value.\n// The callback is given the new state and result of the selector that triggered the callback.\n// The TValue refers to the value returned by the Selector.\nexport type Subscription<TState, TValue> = (state: TState, newValue: TValue, triggeringModifier: Modifier<TState>, isNewState: boolean) => void;\n\n// A function used to remove a subscription. This can be called multiple times.\nexport type RemoveSubscription = () => void;\n\n// An empty modifier, recommended to use when you want to return a modifier that does nothing.\nexport const EmptyModifier: Modifier<any> = () => null;\n\n// Pairing of the selector function and subscription callback.\ninterface SubscriptionSelectorPair<TState, TValue>\n{\n    readonly selector: SelectorContext<TState, TValue>;\n    readonly subscription: Subscription<TState, TValue>;\n}\n\n/**\n * The main data store class. Keeps track of the current state, any subscriptions and optionally a history of the state.\n *\n * By default history is disabled.\n */\nexport default class DataStore<TState>\n{\n    private currentState: TState;\n    private subscriptions: Array<SubscriptionSelectorPair<TState, any>> = [];\n\n    /**\n     * Creates a new DataStore.\n     *\n     * @param initialState The starting values for the data store.\n     */\n    public constructor (initialState: TState)\n    {\n        this.currentState = initialState;\n    }\n\n    /**\n     * Returns the current state.\n     *\n     * @returns The current state.\n     */\n    public state(): Readonly<TState>\n    {\n        return this.currentState;\n    }\n\n    /**\n     * Executes a modifier on the state.\n     * The modifier is recommended to return a partial state that is merged.\n     *\n     * If the modifier returns the same state (as compared with strict equals) or null then\n     * the state is not updated nor is any subscription triggered.\n     *\n     * @param modifier Modifier function to update the state with.\n     * @param isNewState Marks if this state is a new one. Can be used for history subscriptions to know if to record this state update or not.\n     */\n    public execute(modifier: Modifier<TState>, isNewState: boolean = true)\n    {\n        const newState = modifier(this.currentState);\n        if (newState === null || newState === undefined || newState === this.currentState)\n        {\n            return;\n        }\n\n        this.currentState = Object.assign({}, this.currentState, newState);\n        this.triggerSubscriptions(modifier, isNewState);\n    }\n\n    /**\n     * Subscribe to when a part of the state has changed. This will be called on all dispatches.\n     *\n     * @param selector A function for picking the values out of the store you want to check has changed.\n     * @param subscription A callback that will be triggered when the values returned in the selector have changed.\n     * @param comparer An optional comparer for old and new values, these values will the old and new results from the selector, *NOT* the state as a whole.\n     * @param selectorName An optional name to link with the selector to help with debugging.\n     * @returns A function to remove the subscription from the store.\n     */\n    public subscribe<TValue>(selector: Selector<TState, TValue>, subscription: Subscription<TState, TValue>, comparer?: SelectorComparer<TValue>, selectorName?: string): RemoveSubscription\n    {\n        const startValue = selector(this.currentState);\n        const obj = { selector: new SelectorContext(selector, startValue, comparer, selectorName), subscription };\n        this.subscriptions.push(obj);\n\n        let removed = false;\n        return () =>\n        {\n            if (removed)\n            {\n                return;\n            }\n\n            const index = this.subscriptions.indexOf(obj);\n            if (index >= 0)\n            {\n                this.subscriptions.splice(index, 1);\n            }\n            removed = true;\n        };\n    }\n\n    /**\n     * Adds a callback for anytime the store has changed.\n     *\n     * @param callback A callback for when the store has changed.\n     * @param selectorName An optional name to link with the selector to help with debugging.\n     * @returns A function to remove the subscription from the store.\n     */\n    public subscribeAny (callback: Subscription<TState, TState>, selectorName?: string): RemoveSubscription\n    {\n        return this.subscribe((state) => state, callback, undefined, selectorName);\n    }\n\n    /**\n     * Removes all subscriptions.\n     */\n    public unsubscribeAll ()\n    {\n        this.subscriptions = [];\n    }\n\n    /**\n     * Trigger all the subscriptions that an update has executed.\n     *\n     * @param isNewState Marks if this update is for a new state or not. Used by history subscriptions to know if to record the state change or not.\n     */\n    private triggerSubscriptions(modifier: Modifier<TState>, isNewState: boolean)\n    {\n        for (const subscription of this.subscriptions)\n        {\n            const newValue = subscription.selector.getValue(this.currentState);\n            if (subscription.selector.checkIfChanged(newValue))\n            {\n                subscription.subscription(this.currentState, newValue, modifier, isNewState);\n            }\n        }\n    }\n}\n\n/**\n * A selector context is a pairing of a selector function, a comparer and a previous value.\n * This is used to actual keep track of when something has changed and the way to compare the change.\n *\n * NOTE: Not indented to be a public class.\n */\nclass SelectorContext<TState, TValue>\n{\n    public readonly selector: Selector<TState, TValue>;\n    public readonly comparer?: SelectorComparer<TValue>;\n    public readonly name?: string;\n    private prevValue: any;\n\n    constructor (selector: Selector<TState, TValue>, startValue: any = undefined, comparer?: SelectorComparer<TValue>, name?: string)\n    {\n        this.selector = selector;\n        this.prevValue = startValue;\n        this.comparer = comparer;\n        this.name = name;\n    }\n\n    /**\n     * Select the value from the state using the selector function provided.\n     *\n     * @param state The state to get the value from.\n     * @returns Whatever the selector returns.\n     */\n    public getValue (state: TState): any\n    {\n        return this.selector(state);\n    }\n\n    /**\n     * Check if the new value is different from the old one using the comparer.\n     *\n     * @param newValue The new value from the selector.\n     */\n    public checkIfChanged (newValue: any): boolean\n    {\n        let result = false;\n        if (this.comparer !== undefined)\n        {\n            result = !this.comparer(this.prevValue, newValue);\n        }\n        else\n        {\n            result = newValue !== this.prevValue;\n        }\n\n        this.prevValue = newValue;\n        return result;\n    }\n}"]}